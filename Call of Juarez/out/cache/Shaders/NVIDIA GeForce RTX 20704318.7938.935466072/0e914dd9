ÙM‘C!
                    #include<Functions.hlsl>
                    
                    float4 RENDER_TARGET_PARAMS;
                    

                    Texture2D sBackbuffer;
                    SamplerState samBackbuffer;
                    #if defined(USE_COLOR0)
                        Texture2D     sColor0;
                        SamplerState     samColor0;
                        #if defined(USE_COLOR1)
                            Texture2D     sColor1;
                            SamplerState     samColor1;
                        #endif
                    #endif

                    struct pixelInput
                    {
						            float4  vPosition           : SV_POSITION;

                        #if defined(USE_FXCOLORTRANSLUCENCY)
                            #define HALF_vExtinction float4
                        #else
                            #define HALF_vExtinction float3
                        #endif

                        #if defined(USE_BLENDMODEMUL)
                            HALF_vExtinction  vExtinction     : TEXCOORD0; //TODO w to alphatestu
                            float3  vInscattering   : TEXCOORD1;
                            #if defined(USE_COLOR0)
                                float2  uvTexcoord0     : TEXCOORD2;
                                #if defined(USE_COLOR1)
                                    float2  uvTexcoord1     : TEXCOORD3;
                                    #if defined(USE_DEPTHBLENDING)
                                        float vDepth         : TEXCOORD4;
                                    #endif
                                #elif defined(USE_DEPTHBLENDING)
                                    float vDepth        : TEXCOORD3;
                                #endif
                            #elif defined(USE_DEPTHBLENDING)
                                float vDepth        : TEXCOORD2;
                            #endif
                        #elif defined(USE_BLENDMODEADDRGBMULALPHA)
                            float4  vExtinction     : TEXCOORD0;
                            float4  vInscattering   : TEXCOORD1;
                            #if defined(USE_COLOR0)
                                float2  uvTexcoord0     : TEXCOORD2;
                                #if defined(USE_COLOR1)
                                    float2  uvTexcoord1     : TEXCOORD3;
                                    #if defined(USE_DEPTHBLENDING)
                                        float vDepth         : TEXCOORD4;
                                    #endif
                                #elif defined(USE_DEPTHBLENDING)
                                    float vDepth        : TEXCOORD3;
                                #endif
                            #elif defined(USE_DEPTHBLENDING)
                                float vDepth        : TEXCOORD2;
                            #endif
                        #elif defined(USE_BLENDMODEADD)
                            float4  vExtinction     : COLOR0; //TODO w to alphatestu
                            #if defined(USE_COLOR0)
                                float2  uvTexcoord0     : TEXCOORD0;
                                #if defined(USE_COLOR1)
                                    float2  uvTexcoord1     : TEXCOORD1;
                                    #if defined(USE_DEPTHBLENDING)
                                        float vDepth         : TEXCOORD2;
                                    #endif
                                #elif defined(USE_DEPTHBLENDING)
                                    float vDepth        : TEXCOORD1;
                                #endif
                            #elif defined(USE_DEPTHBLENDING)
                                float vDepth        : TEXCOORD0;
                            #endif
                        #else
                            float4  vExtinction     : COLOR0; //TODO w to alphatestu
                            float4  vInscattering   : TEXCOORD0;
                            #if defined(USE_COLOR0)
                                float2  uvTexcoord0     : TEXCOORD1;
                                #if defined(USE_COLOR1)
                                    float2  uvTexcoord1     : TEXCOORD2;
                                    #if defined(USE_DEPTHBLENDING)
                                        float vDepth         : TEXCOORD3;
                                    #endif
                                #elif defined(USE_DEPTHBLENDING)
                                    float vDepth        : TEXCOORD2;
                                #endif
                            #elif defined(USE_DEPTHBLENDING)
                                float vDepth        : TEXCOORD1;
                            #endif
                        #endif
//                        float2 uvBackbuffer: VPOS;
//                        float4 uvBackbuffer: SV_POSITION;
                        
                    };

                    void main( in pixelInput input, out float4 output : SV_TARGET )
                    {
//                        output = float4(1.0f, 1.0f, 0.0f, 1.0f);
                        
                        float4 vDepthBack = sBackbuffer.Sample(samBackbuffer, (input.vPosition.xy + 0.5) * RENDER_TARGET_PARAMS.xy );
                        float vDepthMask = saturate( linearstep( 0, DEPTHFACTOR, vDepthBack.w - input.vDepth  ) );
vDepthMask = 1.0f;

                        #if defined(USE_COLOR0)
                            output = sColor0.Sample( samColor0, input.uvTexcoord0.xy );
                            #if defined(USE_COLOR1)
                                float4 vColor1 = sColor1.Sample( samColor1, input.uvTexcoord1.xy );
                                #if defined(USE_MIXMODEMUL)
                                    output *= vColor1;
                                #elif defined(USE_BLENDMODEADD)
                                    output += vColor1;
                                #endif
                            #endif
                            #if defined(USE_BLENDMODEADD)
                                output.xyz *= input.vExtinction.xyz;
                                output.xyz *= vDepthMask;
                                output.w = saturate(dot( float3(0.3333, 0.3333, 0.3333), output.xyz ) );
                                #if defined(USE_FXCOLORTRANSLUCENCY)
                                    output.w = saturate( output.w - input.vExtinction.w );
                                #endif
                            #elif defined(USE_BLENDMODEMUL)
                                #if defined(USE_FXCOLORTRANSLUCENCY)
                                    output.w = saturate(dot( float3(0.3333, 0.3333, 0.3333), output.xyz ) );
                                    output.w = saturate(  input.vExtinction.w - output.w  );
                                    output.xyz = output.xyz * input.vExtinction.xyz + input.vInscattering.xyz;
                                #else
                                    output.xyz = output.xyz * input.vExtinction.xyz + input.vInscattering.xyz;
                                    output.w = saturate(dot( float3(1.0, 1.0, 1.0), output.xyz ) );
                                #endif
                            #elif defined(USE_BLENDMODEADDRGBMULALPHA)
                                output = output * input.vExtinction + input.vInscattering;
                            #else
                                #if defined(USE_FXCOLORTRANSLUCENCY)
                                    output.xyz = output.xyz * input.vExtinction.xyz + input.vInscattering.xyz;
                                    clip( output.w - input.vInscattering.w );
                                    output.w = saturate( output.w * input.vExtinction.w );
                                #else
                                    output = output * input.vExtinction + input.vInscattering;
                                #endif
//                                output.w *= vDepthMask;
                                output.w = saturate(vDepthMask * output.w);
                            #endif
                        #else
                            output = input.vExtinction;
                        #endif
//                        output = float4(0.0f, 1.0f, 0.0f, 0.5f);
                        
                    }
                ø  DXBCZÂ£ 5_q­{ð¨àœ[   ø     4   Ð   t  ¨  €  RDEF”                  ÿÿ   n   \                             f                          samColor0 sColor0 Microsoft (R) HLSL Shader Compiler «««ISGNœ         €                    Œ                   ’                   ’                  ’                   SV_POSITION COLOR TEXCOORD «OSGN,                               SV_TARGET ««SHDRÐ   @   4   b ò    b ò    b 2    e  ò      X  p     UU  Z   `     h     E  	ò      F    F~      `     2  	ò      F     F    F    6  ‚      :      6  r      F     >  STATp                                                                                                             m   USE_DEPTHBLENDING 1.000000 USE_COLOR0 1 USE_BLENDMODELERP 1 SHADOW_QUALITY 3 HSM_MODE 1 DEPTHFACTOR 1.000000              &   (   :   <   K   M   V   X   d              ªªÿý               yx                 ±Û               ¿               ®'×U    	 samColor0                               sColor0                              